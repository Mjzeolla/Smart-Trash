# -*- coding: utf-8 -*-
"""Yolo_Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14BcY5yEy0rX_UhVJPczO6UylpOBaWk-m
"""

!git clone https://github.com/WongKinYiu/yolov7.git

#Make sure you have GPU
!nvidia-smi

"""If you get "CUDA is unavailable":
1. Click Runtime at the top
2. Change runtime type (GPU from hardware accelerator)
3. Click save

1.   Add both datasets into content/
2.   Also make sure you put  yolov7-custom.yaml in cfg/training
3.   Put data.yaml in data folder
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os
import glob
import shutil
import PIL
import tensorflow as tf
import PIL.Image
import zipfile

!unzip -o '/content/trash_net' -d '/content'
!unzip -o '/content/yolo_labels' -d '/content'

from google.colab import drive
drive.mount('/content/drive')

"""```
`# This is formatted as code`
```

In CFG folder and in Data Folder created yolov7-custom.yaml file and created data.yaml file to go with trashnet

Check where this code is running, and that you correctly downloaded git hub and you have your trash_net.zip and yolo_labels.zip. Code should be running in content for now, will  cd later into yolov7 when we want to train the network
"""

import os
#showing working directory because I imported from github

#Check the current working directory
print(os.getcwd())

#List the contents of the directory
print(os.listdir())

#Recursively search for the 'yolov7' directory
search_dir = os.getcwd()
for root, dirs, files in os.walk(search_dir):
    if 'yolov7' in dirs:
        yolov7_path = os.path.join(root, 'yolov7')
        break

#Check if the 'yolov7' directory is found
if 'yolov7_path' in locals():
    print(f"Found 'yolov7' directory at: {yolov7_path}")
else:
    print("Failed to locate 'yolov7' directory.")

base_dir = '/content/trash_net/'
classes = ['cardboard', 'glass', 'metal', 'paper', 'plastic', 'trash']

!pip install split-folders
import splitfolders as sf

data_dir = '/content/trash_net_data'
sf.ratio(base_dir, # The location of dataset
        output='trash_net_data', # The output location
        seed=42, # The number of seed
        ratio=(.7, .2, .1), # The ratio of splited dataset
        group_prefix=None, # If your dataset contains more than one file like ".jpg", ".pdf", etc
        move=False # If you choose to move, turn this into True
      )

#Generates the YOLO dataset (since it needs labels)
yolo_dir = '/content/yolo_trash_net_data/'
label_dir = '/content/yolo_labels'

labels = glob.glob(label_dir + '/*.txt')
print("Labels: " + str(len(labels)))


for folder in ['test', 'train', 'val']:
  if not os.path.exists(os.path.join(yolo_dir, folder)):
      os.makedirs(os.path.join(yolo_dir, folder))
      os.makedirs(os.path.join(yolo_dir, folder, 'images'))
      os.makedirs(os.path.join(yolo_dir, folder, 'labels'))
  for cl in classes:
    img_path = os.path.join(data_dir,folder, cl)
    images = glob.glob(img_path + '/*.jpg')
    print("{} {}: {} Images".format(folder, cl, len(images)))
    for img in images:
      img_string = os.path.basename(img).replace('.jpg', '_jpg')
      label = list(filter(lambda x: img_string in x, labels))
      if len(label) == 1:
        label_name = os.path.basename(label[0])
        shutil.copy(img, os.path.join(yolo_dir, folder, 'images'))
        shutil.copy(label[0], os.path.join(yolo_dir, folder, 'labels'))
        dest_dir = os.path.join(yolo_dir, folder, 'labels')
        new_file = os.path.join(dest_dir, img_string.replace('_jpg', '.txt'))
        old_file = os.path.join(dest_dir, label_name)
        os.rename(old_file, new_file)

for folder in ['test', 'train', 'val']:
    img_path = os.path.join(yolo_dir, folder, 'images')
    images = glob.glob(img_path + '/*.jpg')
    label_path = os.path.join(yolo_dir, folder, 'labels')
    labels = glob.glob(label_path + '/*.txt')
    print("{}: {} Images".format(folder, len(images)))
    print("{}: {} Labels".format(folder, len(labels)))

#moving folders into github repo /data folder
import shutil

#Set the paths for source and destination directories
source_dir = '/content/yolo_trash_net_data'
destination_dir = '/content/yolov7/data'

#Move each folder (test, train, val) from source to destination
for folder in ['test', 'train', 'val']:
    source_folder = os.path.join(source_dir, folder)
    destination_folder = os.path.join(destination_dir, folder)
    shutil.move(source_folder, destination_folder)

print("Folders moved successfully!")

#reminder, make sure you create cfg file and data.yaml file for label and image locations
#the paths are in the command below for the cfg and data files
#for now just used generic hyperparamters they used, but we can play around with these

"""Before training, on line 528  of train.py, remove default yolov7.pt. Just leave it as an empty string. Also make epochs 100 a few lines below. Also need to change hyp.scrach.custom if you want to change learning rates etc."""

#Change the current working directory to yolov7
os.chdir('/content/yolov7')

#Run the train.py script
!python train.py --workers 8 --device 0 --batch-size 16 --data data/data.yaml --img 640 640 --cfg cfg/training/yolov7-custom.yaml --name yolov7-custom --hyp data/hyp.scratch.custom.yaml

#If you want to use pretrained weights, use the code below, and use the argument --weights to put your model in
# !python train.py --workers 8 --device 0 --batch-size 32 --data data/data.yaml --img 640 640 --cfg cfg/training/yolov7-custom.yaml --weights 'yolov7_trashnet_training.pt' --name yolov7-custom --hyp data/hyp.scratch.custom.yaml

"""1. Epoch: Represents the current epoch
2. gpu_mem: Indicates the GPU memory usage during training
3. box: Refers to the loss associated with bounding box regression. This loss measures the accuracy of the predicted bounding box coordinates.
4. obj: Represents the loss associated with objectness prediction. This loss evaluates how well the model predicts the presence of objects in an image.
5. cls: Indicates the loss associated with class prediction. This loss measures the accuracy of the predicted class labels.
6. total: Represents the total loss, which is the sum of the bounding box loss, objectness loss, and class prediction loss. (this should get smaller as model trains)
7. labels: Indicates the number of labels present in the dataset
8. img_size: Refers to the size of the input images

If you get "CUDA is unavailable":
1. Click Runtime at the top
2. Change runtime type (GPU from hardware accelerator)
3. Click save

* If you get data.yaml is not found, make
sure you create your cfg in cfg/ and data yaml in data/

*   When you import the model (best.pt) into the weights folder, it takes a long time. Do not interupt upload or data can be corrupted
"""

#display inference on ALL test images
#DO NOT HAVE TO RUN THIS. JUST TO SEE IF IMAGES ARE THERE.
import glob
from IPython.display import Image, display

i = 0
limit = 10000 # max images to print
for imageName in glob.glob('/content/yolov7/data/test/images/*.jpg'): #assuming JPG
    if i < limit:
      display(Image(filename=imageName))
      print("\n")
    i = i + 1

# Run evaluation
#!python detect.py --weights runs/train/yolov7-custom/weights/best.pt --conf 0.1 --source /content/yolov7/data/test/images
!python test.py --data data/data.yaml --img-size 640 --batch-size 16 --conf-thres 0.1 --iou-thres 0.65 --device 0 --weights /content/yolov7/runs/train/yolov7-custom/weights/best.pt --name yolov7_testing --save-json